using System;
using System.Linq.Expressions;

namespace ElasticSearchLite.NetCore.Interfaces.Aggregate
{
    public interface IFilteredAggregatedQuery<TPoco>
        where TPoco: IElasticPoco
    {
        /// <summary>
        /// A single-value metrics aggregation that computes the average of numeric values that are extracted from the aggregated documents. 
        /// These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> Average(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// A single-value metrics aggregation that calculates an approximate count of distinct values. 
        /// Values can be extracted either from specific fields in the document or generated by a script.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> Cardinality(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// A single-value metrics aggregation that keeps track and returns the maximum value among the numeric values extracted from the aggregated documents. 
        /// These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> Max(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// A single-value metrics aggregation that keeps track and returns the minimum value among numeric values extracted from the aggregated documents. 
        /// These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> Min(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// A single-value metrics aggregation that sums up numeric values that are extracted from the aggregated documents. 
        /// These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> Sum(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// A single-value metrics aggregation that counts the number of values that are extracted from the aggregated documents. 
        /// These values can be extracted either from specific fields in the documents, or be generated by a provided script. 
        /// Typically, this aggregator will be used in conjunction with other single-value aggregations. 
        /// For example, when computing the avg one might be interested in the number of values the average is computed over.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> ValueCount(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// Given an ordered series of data, the Moving Average aggregation will slide a window across the data and emit the average value of that window.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IMAAggregatedQuery<TPoco> SimpleMovingAverage(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// The linear model assigns a linear weighting to points in the series, such that "older" datapoints (e.g. those at the beginning of the window) contribute a linearly less amount to the total average.
        /// The linear weighting helps reduce the "lag" behind the data’s mean, since older points have less influence.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IMAAggregatedQuery<TPoco> LinearMovingAverage(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// The ewma model (aka "single-exponential") is similar to the linear model, except older data-points become exponentially less important, rather than linearly less important. 
        /// The speed at which the importance decays can be controlled with an alpha setting. 
        /// Small values make the weight decay slowly, which provides greater smoothing and takes into account a larger portion of the window. 
        /// Larger valuers make the weight decay quickly, which reduces the impact of older values on the moving average. 
        /// This tends to make the moving average track the data more closely but with less smoothing.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IMAAggregatedQuery<TPoco> EWMA(Expression<Func<TPoco, object>> propertyExpression);
    }
}
