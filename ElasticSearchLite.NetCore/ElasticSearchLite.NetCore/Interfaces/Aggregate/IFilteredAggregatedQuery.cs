using System;
using System.Linq.Expressions;

namespace ElasticSearchLite.NetCore.Interfaces.Aggregate
{
    public interface IFilteredAggregatedQuery<TPoco>
        where TPoco: IElasticPoco
    {
        /// <summary>
        /// A single-value metrics aggregation that computes the average of numeric values that are extracted from the aggregated documents. 
        /// These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> Average(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// A single-value metrics aggregation that calculates an approximate count of distinct values. 
        /// Values can be extracted either from specific fields in the document or generated by a script.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> Cardinality(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// A single-value metrics aggregation that keeps track and returns the maximum value among the numeric values extracted from the aggregated documents. 
        /// These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> Max(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// A single-value metrics aggregation that keeps track and returns the minimum value among numeric values extracted from the aggregated documents. 
        /// These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> Min(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// A single-value metrics aggregation that sums up numeric values that are extracted from the aggregated documents. 
        /// These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> Sum(Expression<Func<TPoco, object>> propertyExpression);
        /// <summary>
        /// A single-value metrics aggregation that counts the number of values that are extracted from the aggregated documents. 
        /// These values can be extracted either from specific fields in the documents, or be generated by a provided script. 
        /// Typically, this aggregator will be used in conjunction with other single-value aggregations. 
        /// For example, when computing the avg one might be interested in the number of values the average is computed over.
        /// </summary>
        /// <param name="propertyExpression"></param>
        /// <returns></returns>
        IExecutableAggregatedQuery<TPoco> ValueCount(Expression<Func<TPoco, object>> propertyExpression);
    }
}
